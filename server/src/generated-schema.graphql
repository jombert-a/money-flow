# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateOperation {
  _avg: OperationAvgAggregate
  _count: OperationCountAggregate
  _max: OperationMaxAggregate
  _min: OperationMinAggregate
  _sum: OperationSumAggregate
}

type AggregateOperationType {
  _count: OperationTypeCountAggregate
  _max: OperationTypeMaxAggregate
  _min: OperationTypeMinAggregate
}

type AggregatePlace {
  _count: PlaceCountAggregate
  _max: PlaceMaxAggregate
  _min: PlaceMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

type Mutation {
  createManyOperation(data: [OperationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOperationType(data: [OperationTypeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPlace(data: [PlaceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneOperation(data: OperationCreateInput!): Operation!
  createOneOperationType(data: OperationTypeCreateInput!): OperationType!
  createOnePlace(data: PlaceCreateInput!): Place!
  createOneUser(data: UserCreateInput!): User!
  deleteManyOperation(where: OperationWhereInput): AffectedRowsOutput!
  deleteManyOperationType(where: OperationTypeWhereInput): AffectedRowsOutput!
  deleteManyPlace(where: PlaceWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneOperation(where: OperationWhereUniqueInput!): Operation
  deleteOneOperationType(where: OperationTypeWhereUniqueInput!): OperationType
  deleteOnePlace(where: PlaceWhereUniqueInput!): Place
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyOperation(data: OperationUpdateManyMutationInput!, where: OperationWhereInput): AffectedRowsOutput!
  updateManyOperationType(data: OperationTypeUpdateManyMutationInput!, where: OperationTypeWhereInput): AffectedRowsOutput!
  updateManyPlace(data: PlaceUpdateManyMutationInput!, where: PlaceWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneOperation(data: OperationUpdateInput!, where: OperationWhereUniqueInput!): Operation
  updateOneOperationType(data: OperationTypeUpdateInput!, where: OperationTypeWhereUniqueInput!): OperationType
  updateOnePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneOperation(create: OperationCreateInput!, update: OperationUpdateInput!, where: OperationWhereUniqueInput!): Operation!
  upsertOneOperationType(create: OperationTypeCreateInput!, update: OperationTypeUpdateInput!, where: OperationTypeWhereUniqueInput!): OperationType!
  upsertOnePlace(create: PlaceCreateInput!, update: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Operation {
  comment: String
  date: DateTime!
  id: String!
  operationType: OperationType!
  operationTypeId: String!
  place: Place
  placeId: String
  user: User!
  userId: String!
  value: Float!
}

type OperationAvgAggregate {
  value: Float
}

input OperationAvgOrderByAggregateInput {
  value: SortOrder
}

type OperationCountAggregate {
  _all: Int!
  comment: Int!
  date: Int!
  id: Int!
  operationTypeId: Int!
  placeId: Int!
  userId: Int!
  value: Int!
}

input OperationCountOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  operationTypeId: SortOrder
  placeId: SortOrder
  userId: SortOrder
  value: SortOrder
}

input OperationCreateInput {
  comment: String
  date: DateTime!
  id: String
  operationType: OperationTypeCreateNestedOneWithoutOperationsInput!
  place: PlaceCreateNestedOneWithoutOperationsInput
  user: UserCreateNestedOneWithoutOperationsInput!
  value: Float!
}

input OperationCreateManyInput {
  comment: String
  date: DateTime!
  id: String
  operationTypeId: String!
  placeId: String
  userId: String!
  value: Float!
}

input OperationCreateManyOperationTypeInput {
  comment: String
  date: DateTime!
  id: String
  placeId: String
  userId: String!
  value: Float!
}

input OperationCreateManyOperationTypeInputEnvelope {
  data: [OperationCreateManyOperationTypeInput!]!
  skipDuplicates: Boolean
}

input OperationCreateManyPlaceInput {
  comment: String
  date: DateTime!
  id: String
  operationTypeId: String!
  userId: String!
  value: Float!
}

input OperationCreateManyPlaceInputEnvelope {
  data: [OperationCreateManyPlaceInput!]!
  skipDuplicates: Boolean
}

input OperationCreateManyUserInput {
  comment: String
  date: DateTime!
  id: String
  operationTypeId: String!
  placeId: String
  value: Float!
}

input OperationCreateManyUserInputEnvelope {
  data: [OperationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input OperationCreateNestedManyWithoutOperationTypeInput {
  connect: [OperationWhereUniqueInput!]
  connectOrCreate: [OperationCreateOrConnectWithoutOperationTypeInput!]
  create: [OperationCreateWithoutOperationTypeInput!]
  createMany: OperationCreateManyOperationTypeInputEnvelope
}

input OperationCreateNestedManyWithoutPlaceInput {
  connect: [OperationWhereUniqueInput!]
  connectOrCreate: [OperationCreateOrConnectWithoutPlaceInput!]
  create: [OperationCreateWithoutPlaceInput!]
  createMany: OperationCreateManyPlaceInputEnvelope
}

input OperationCreateNestedManyWithoutUserInput {
  connect: [OperationWhereUniqueInput!]
  connectOrCreate: [OperationCreateOrConnectWithoutUserInput!]
  create: [OperationCreateWithoutUserInput!]
  createMany: OperationCreateManyUserInputEnvelope
}

input OperationCreateOrConnectWithoutOperationTypeInput {
  create: OperationCreateWithoutOperationTypeInput!
  where: OperationWhereUniqueInput!
}

input OperationCreateOrConnectWithoutPlaceInput {
  create: OperationCreateWithoutPlaceInput!
  where: OperationWhereUniqueInput!
}

input OperationCreateOrConnectWithoutUserInput {
  create: OperationCreateWithoutUserInput!
  where: OperationWhereUniqueInput!
}

input OperationCreateWithoutOperationTypeInput {
  comment: String
  date: DateTime!
  id: String
  place: PlaceCreateNestedOneWithoutOperationsInput
  user: UserCreateNestedOneWithoutOperationsInput!
  value: Float!
}

input OperationCreateWithoutPlaceInput {
  comment: String
  date: DateTime!
  id: String
  operationType: OperationTypeCreateNestedOneWithoutOperationsInput!
  user: UserCreateNestedOneWithoutOperationsInput!
  value: Float!
}

input OperationCreateWithoutUserInput {
  comment: String
  date: DateTime!
  id: String
  operationType: OperationTypeCreateNestedOneWithoutOperationsInput!
  place: PlaceCreateNestedOneWithoutOperationsInput
  value: Float!
}

type OperationGroupBy {
  _avg: OperationAvgAggregate
  _count: OperationCountAggregate
  _max: OperationMaxAggregate
  _min: OperationMinAggregate
  _sum: OperationSumAggregate
  comment: String
  date: DateTime!
  id: String!
  operationTypeId: String!
  placeId: String
  userId: String!
  value: Float!
}

input OperationListRelationFilter {
  every: OperationWhereInput
  none: OperationWhereInput
  some: OperationWhereInput
}

type OperationMaxAggregate {
  comment: String
  date: DateTime
  id: String
  operationTypeId: String
  placeId: String
  userId: String
  value: Float
}

input OperationMaxOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  operationTypeId: SortOrder
  placeId: SortOrder
  userId: SortOrder
  value: SortOrder
}

type OperationMinAggregate {
  comment: String
  date: DateTime
  id: String
  operationTypeId: String
  placeId: String
  userId: String
  value: Float
}

input OperationMinOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  operationTypeId: SortOrder
  placeId: SortOrder
  userId: SortOrder
  value: SortOrder
}

input OperationOrderByRelationAggregateInput {
  _count: SortOrder
}

input OperationOrderByWithAggregationInput {
  _avg: OperationAvgOrderByAggregateInput
  _count: OperationCountOrderByAggregateInput
  _max: OperationMaxOrderByAggregateInput
  _min: OperationMinOrderByAggregateInput
  _sum: OperationSumOrderByAggregateInput
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  operationTypeId: SortOrder
  placeId: SortOrder
  userId: SortOrder
  value: SortOrder
}

input OperationOrderByWithRelationInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  operationType: OperationTypeOrderByWithRelationInput
  operationTypeId: SortOrder
  place: PlaceOrderByWithRelationInput
  placeId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  value: SortOrder
}

enum OperationScalarFieldEnum {
  comment
  date
  id
  operationTypeId
  placeId
  userId
  value
}

input OperationScalarWhereInput {
  AND: [OperationScalarWhereInput!]
  NOT: [OperationScalarWhereInput!]
  OR: [OperationScalarWhereInput!]
  comment: StringNullableFilter
  date: DateTimeFilter
  id: StringFilter
  operationTypeId: StringFilter
  placeId: StringNullableFilter
  userId: StringFilter
  value: FloatFilter
}

input OperationScalarWhereWithAggregatesInput {
  AND: [OperationScalarWhereWithAggregatesInput!]
  NOT: [OperationScalarWhereWithAggregatesInput!]
  OR: [OperationScalarWhereWithAggregatesInput!]
  comment: StringNullableWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  operationTypeId: StringWithAggregatesFilter
  placeId: StringNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
  value: FloatWithAggregatesFilter
}

type OperationSumAggregate {
  value: Float
}

input OperationSumOrderByAggregateInput {
  value: SortOrder
}

type OperationType {
  _count: OperationTypeCount
  id: String!
  name: String!
  operations(cursor: OperationWhereUniqueInput, distinct: [OperationScalarFieldEnum!], orderBy: [OperationOrderByWithRelationInput!], skip: Int, take: Int, where: OperationWhereInput): [Operation!]!
  postive: Boolean!
}

type OperationTypeCount {
  operations: Int!
}

type OperationTypeCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  postive: Int!
}

input OperationTypeCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  postive: SortOrder
}

input OperationTypeCreateInput {
  id: String
  name: String!
  operations: OperationCreateNestedManyWithoutOperationTypeInput
  postive: Boolean
}

input OperationTypeCreateManyInput {
  id: String
  name: String!
  postive: Boolean
}

input OperationTypeCreateNestedOneWithoutOperationsInput {
  connect: OperationTypeWhereUniqueInput
  connectOrCreate: OperationTypeCreateOrConnectWithoutOperationsInput
  create: OperationTypeCreateWithoutOperationsInput
}

input OperationTypeCreateOrConnectWithoutOperationsInput {
  create: OperationTypeCreateWithoutOperationsInput!
  where: OperationTypeWhereUniqueInput!
}

input OperationTypeCreateWithoutOperationsInput {
  id: String
  name: String!
  postive: Boolean
}

type OperationTypeGroupBy {
  _count: OperationTypeCountAggregate
  _max: OperationTypeMaxAggregate
  _min: OperationTypeMinAggregate
  id: String!
  name: String!
  postive: Boolean!
}

type OperationTypeMaxAggregate {
  id: String
  name: String
  postive: Boolean
}

input OperationTypeMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  postive: SortOrder
}

type OperationTypeMinAggregate {
  id: String
  name: String
  postive: Boolean
}

input OperationTypeMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  postive: SortOrder
}

input OperationTypeOrderByWithAggregationInput {
  _count: OperationTypeCountOrderByAggregateInput
  _max: OperationTypeMaxOrderByAggregateInput
  _min: OperationTypeMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  postive: SortOrder
}

input OperationTypeOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  operations: OperationOrderByRelationAggregateInput
  postive: SortOrder
}

input OperationTypeRelationFilter {
  is: OperationTypeWhereInput
  isNot: OperationTypeWhereInput
}

enum OperationTypeScalarFieldEnum {
  id
  name
  postive
}

input OperationTypeScalarWhereWithAggregatesInput {
  AND: [OperationTypeScalarWhereWithAggregatesInput!]
  NOT: [OperationTypeScalarWhereWithAggregatesInput!]
  OR: [OperationTypeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  postive: BoolWithAggregatesFilter
}

input OperationTypeUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  operations: OperationUpdateManyWithoutOperationTypeNestedInput
  postive: BoolFieldUpdateOperationsInput
}

input OperationTypeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postive: BoolFieldUpdateOperationsInput
}

input OperationTypeUpdateOneRequiredWithoutOperationsNestedInput {
  connect: OperationTypeWhereUniqueInput
  connectOrCreate: OperationTypeCreateOrConnectWithoutOperationsInput
  create: OperationTypeCreateWithoutOperationsInput
  update: OperationTypeUpdateWithoutOperationsInput
  upsert: OperationTypeUpsertWithoutOperationsInput
}

input OperationTypeUpdateWithoutOperationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postive: BoolFieldUpdateOperationsInput
}

input OperationTypeUpsertWithoutOperationsInput {
  create: OperationTypeCreateWithoutOperationsInput!
  update: OperationTypeUpdateWithoutOperationsInput!
}

input OperationTypeWhereInput {
  AND: [OperationTypeWhereInput!]
  NOT: [OperationTypeWhereInput!]
  OR: [OperationTypeWhereInput!]
  id: StringFilter
  name: StringFilter
  operations: OperationListRelationFilter
  postive: BoolFilter
}

input OperationTypeWhereUniqueInput {
  id: String
  name: String
}

input OperationUpdateInput {
  comment: NullableStringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  operationType: OperationTypeUpdateOneRequiredWithoutOperationsNestedInput
  place: PlaceUpdateOneWithoutOperationsNestedInput
  user: UserUpdateOneRequiredWithoutOperationsNestedInput
  value: FloatFieldUpdateOperationsInput
}

input OperationUpdateManyMutationInput {
  comment: NullableStringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  value: FloatFieldUpdateOperationsInput
}

input OperationUpdateManyWithWhereWithoutOperationTypeInput {
  data: OperationUpdateManyMutationInput!
  where: OperationScalarWhereInput!
}

input OperationUpdateManyWithWhereWithoutPlaceInput {
  data: OperationUpdateManyMutationInput!
  where: OperationScalarWhereInput!
}

input OperationUpdateManyWithWhereWithoutUserInput {
  data: OperationUpdateManyMutationInput!
  where: OperationScalarWhereInput!
}

input OperationUpdateManyWithoutOperationTypeNestedInput {
  connect: [OperationWhereUniqueInput!]
  connectOrCreate: [OperationCreateOrConnectWithoutOperationTypeInput!]
  create: [OperationCreateWithoutOperationTypeInput!]
  createMany: OperationCreateManyOperationTypeInputEnvelope
  delete: [OperationWhereUniqueInput!]
  deleteMany: [OperationScalarWhereInput!]
  disconnect: [OperationWhereUniqueInput!]
  set: [OperationWhereUniqueInput!]
  update: [OperationUpdateWithWhereUniqueWithoutOperationTypeInput!]
  updateMany: [OperationUpdateManyWithWhereWithoutOperationTypeInput!]
  upsert: [OperationUpsertWithWhereUniqueWithoutOperationTypeInput!]
}

input OperationUpdateManyWithoutPlaceNestedInput {
  connect: [OperationWhereUniqueInput!]
  connectOrCreate: [OperationCreateOrConnectWithoutPlaceInput!]
  create: [OperationCreateWithoutPlaceInput!]
  createMany: OperationCreateManyPlaceInputEnvelope
  delete: [OperationWhereUniqueInput!]
  deleteMany: [OperationScalarWhereInput!]
  disconnect: [OperationWhereUniqueInput!]
  set: [OperationWhereUniqueInput!]
  update: [OperationUpdateWithWhereUniqueWithoutPlaceInput!]
  updateMany: [OperationUpdateManyWithWhereWithoutPlaceInput!]
  upsert: [OperationUpsertWithWhereUniqueWithoutPlaceInput!]
}

input OperationUpdateManyWithoutUserNestedInput {
  connect: [OperationWhereUniqueInput!]
  connectOrCreate: [OperationCreateOrConnectWithoutUserInput!]
  create: [OperationCreateWithoutUserInput!]
  createMany: OperationCreateManyUserInputEnvelope
  delete: [OperationWhereUniqueInput!]
  deleteMany: [OperationScalarWhereInput!]
  disconnect: [OperationWhereUniqueInput!]
  set: [OperationWhereUniqueInput!]
  update: [OperationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OperationUpdateManyWithWhereWithoutUserInput!]
  upsert: [OperationUpsertWithWhereUniqueWithoutUserInput!]
}

input OperationUpdateWithWhereUniqueWithoutOperationTypeInput {
  data: OperationUpdateWithoutOperationTypeInput!
  where: OperationWhereUniqueInput!
}

input OperationUpdateWithWhereUniqueWithoutPlaceInput {
  data: OperationUpdateWithoutPlaceInput!
  where: OperationWhereUniqueInput!
}

input OperationUpdateWithWhereUniqueWithoutUserInput {
  data: OperationUpdateWithoutUserInput!
  where: OperationWhereUniqueInput!
}

input OperationUpdateWithoutOperationTypeInput {
  comment: NullableStringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  place: PlaceUpdateOneWithoutOperationsNestedInput
  user: UserUpdateOneRequiredWithoutOperationsNestedInput
  value: FloatFieldUpdateOperationsInput
}

input OperationUpdateWithoutPlaceInput {
  comment: NullableStringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  operationType: OperationTypeUpdateOneRequiredWithoutOperationsNestedInput
  user: UserUpdateOneRequiredWithoutOperationsNestedInput
  value: FloatFieldUpdateOperationsInput
}

input OperationUpdateWithoutUserInput {
  comment: NullableStringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  operationType: OperationTypeUpdateOneRequiredWithoutOperationsNestedInput
  place: PlaceUpdateOneWithoutOperationsNestedInput
  value: FloatFieldUpdateOperationsInput
}

input OperationUpsertWithWhereUniqueWithoutOperationTypeInput {
  create: OperationCreateWithoutOperationTypeInput!
  update: OperationUpdateWithoutOperationTypeInput!
  where: OperationWhereUniqueInput!
}

input OperationUpsertWithWhereUniqueWithoutPlaceInput {
  create: OperationCreateWithoutPlaceInput!
  update: OperationUpdateWithoutPlaceInput!
  where: OperationWhereUniqueInput!
}

input OperationUpsertWithWhereUniqueWithoutUserInput {
  create: OperationCreateWithoutUserInput!
  update: OperationUpdateWithoutUserInput!
  where: OperationWhereUniqueInput!
}

input OperationWhereInput {
  AND: [OperationWhereInput!]
  NOT: [OperationWhereInput!]
  OR: [OperationWhereInput!]
  comment: StringNullableFilter
  date: DateTimeFilter
  id: StringFilter
  operationType: OperationTypeRelationFilter
  operationTypeId: StringFilter
  place: PlaceRelationFilter
  placeId: StringNullableFilter
  user: UserRelationFilter
  userId: StringFilter
  value: FloatFilter
}

input OperationWhereUniqueInput {
  id: String
}

type Place {
  Operations(cursor: OperationWhereUniqueInput, distinct: [OperationScalarFieldEnum!], orderBy: [OperationOrderByWithRelationInput!], skip: Int, take: Int, where: OperationWhereInput): [Operation!]!
  _count: PlaceCount
  id: String!
  name: String!
}

type PlaceCount {
  Operations: Int!
}

type PlaceCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input PlaceCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input PlaceCreateInput {
  Operations: OperationCreateNestedManyWithoutPlaceInput
  id: String
  name: String!
}

input PlaceCreateManyInput {
  id: String
  name: String!
}

input PlaceCreateNestedOneWithoutOperationsInput {
  connect: PlaceWhereUniqueInput
  connectOrCreate: PlaceCreateOrConnectWithoutOperationsInput
  create: PlaceCreateWithoutOperationsInput
}

input PlaceCreateOrConnectWithoutOperationsInput {
  create: PlaceCreateWithoutOperationsInput!
  where: PlaceWhereUniqueInput!
}

input PlaceCreateWithoutOperationsInput {
  id: String
  name: String!
}

type PlaceGroupBy {
  _count: PlaceCountAggregate
  _max: PlaceMaxAggregate
  _min: PlaceMinAggregate
  id: String!
  name: String!
}

type PlaceMaxAggregate {
  id: String
  name: String
}

input PlaceMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type PlaceMinAggregate {
  id: String
  name: String
}

input PlaceMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input PlaceOrderByWithAggregationInput {
  _count: PlaceCountOrderByAggregateInput
  _max: PlaceMaxOrderByAggregateInput
  _min: PlaceMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input PlaceOrderByWithRelationInput {
  Operations: OperationOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
}

input PlaceRelationFilter {
  is: PlaceWhereInput
  isNot: PlaceWhereInput
}

enum PlaceScalarFieldEnum {
  id
  name
}

input PlaceScalarWhereWithAggregatesInput {
  AND: [PlaceScalarWhereWithAggregatesInput!]
  NOT: [PlaceScalarWhereWithAggregatesInput!]
  OR: [PlaceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input PlaceUpdateInput {
  Operations: OperationUpdateManyWithoutPlaceNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input PlaceUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input PlaceUpdateOneWithoutOperationsNestedInput {
  connect: PlaceWhereUniqueInput
  connectOrCreate: PlaceCreateOrConnectWithoutOperationsInput
  create: PlaceCreateWithoutOperationsInput
  delete: Boolean
  disconnect: Boolean
  update: PlaceUpdateWithoutOperationsInput
  upsert: PlaceUpsertWithoutOperationsInput
}

input PlaceUpdateWithoutOperationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input PlaceUpsertWithoutOperationsInput {
  create: PlaceCreateWithoutOperationsInput!
  update: PlaceUpdateWithoutOperationsInput!
}

input PlaceWhereInput {
  AND: [PlaceWhereInput!]
  NOT: [PlaceWhereInput!]
  OR: [PlaceWhereInput!]
  Operations: OperationListRelationFilter
  id: StringFilter
  name: StringFilter
}

input PlaceWhereUniqueInput {
  id: String
}

type Query {
  aggregateOperation(cursor: OperationWhereUniqueInput, orderBy: [OperationOrderByWithRelationInput!], skip: Int, take: Int, where: OperationWhereInput): AggregateOperation!
  aggregateOperationType(cursor: OperationTypeWhereUniqueInput, orderBy: [OperationTypeOrderByWithRelationInput!], skip: Int, take: Int, where: OperationTypeWhereInput): AggregateOperationType!
  aggregatePlace(cursor: PlaceWhereUniqueInput, orderBy: [PlaceOrderByWithRelationInput!], skip: Int, take: Int, where: PlaceWhereInput): AggregatePlace!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstOperation(cursor: OperationWhereUniqueInput, distinct: [OperationScalarFieldEnum!], orderBy: [OperationOrderByWithRelationInput!], skip: Int, take: Int, where: OperationWhereInput): Operation
  findFirstOperationType(cursor: OperationTypeWhereUniqueInput, distinct: [OperationTypeScalarFieldEnum!], orderBy: [OperationTypeOrderByWithRelationInput!], skip: Int, take: Int, where: OperationTypeWhereInput): OperationType
  findFirstPlace(cursor: PlaceWhereUniqueInput, distinct: [PlaceScalarFieldEnum!], orderBy: [PlaceOrderByWithRelationInput!], skip: Int, take: Int, where: PlaceWhereInput): Place
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByOperation(by: [OperationScalarFieldEnum!]!, having: OperationScalarWhereWithAggregatesInput, orderBy: [OperationOrderByWithAggregationInput!], skip: Int, take: Int, where: OperationWhereInput): [OperationGroupBy!]!
  groupByOperationType(by: [OperationTypeScalarFieldEnum!]!, having: OperationTypeScalarWhereWithAggregatesInput, orderBy: [OperationTypeOrderByWithAggregationInput!], skip: Int, take: Int, where: OperationTypeWhereInput): [OperationTypeGroupBy!]!
  groupByPlace(by: [PlaceScalarFieldEnum!]!, having: PlaceScalarWhereWithAggregatesInput, orderBy: [PlaceOrderByWithAggregationInput!], skip: Int, take: Int, where: PlaceWhereInput): [PlaceGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  operation(where: OperationWhereUniqueInput!): Operation
  operationType(where: OperationTypeWhereUniqueInput!): OperationType
  operationTypes(cursor: OperationTypeWhereUniqueInput, distinct: [OperationTypeScalarFieldEnum!], orderBy: [OperationTypeOrderByWithRelationInput!], skip: Int, take: Int, where: OperationTypeWhereInput): [OperationType!]!
  operations(cursor: OperationWhereUniqueInput, distinct: [OperationScalarFieldEnum!], orderBy: [OperationOrderByWithRelationInput!], skip: Int, take: Int, where: OperationWhereInput): [Operation!]!
  place(where: PlaceWhereUniqueInput!): Place
  places(cursor: PlaceWhereUniqueInput, distinct: [PlaceScalarFieldEnum!], orderBy: [PlaceOrderByWithRelationInput!], skip: Int, take: Int, where: PlaceWhereInput): [Place!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  email: String!
  id: String!
  operations(cursor: OperationWhereUniqueInput, distinct: [OperationScalarFieldEnum!], orderBy: [OperationOrderByWithRelationInput!], skip: Int, take: Int, where: OperationWhereInput): [Operation!]!
}

type UserCount {
  operations: Int!
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  id: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
}

input UserCreateInput {
  email: String!
  id: String
  operations: OperationCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email: String!
  id: String
}

input UserCreateNestedOneWithoutOperationsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOperationsInput
  create: UserCreateWithoutOperationsInput
}

input UserCreateOrConnectWithoutOperationsInput {
  create: UserCreateWithoutOperationsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutOperationsInput {
  email: String!
  id: String
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  email: String!
  id: String!
}

type UserMaxAggregate {
  email: String
  id: String
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
}

type UserMinAggregate {
  email: String
  id: String
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email: SortOrder
  id: SortOrder
}

input UserOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  operations: OperationOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  id
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  operations: OperationUpdateManyWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutOperationsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOperationsInput
  create: UserCreateWithoutOperationsInput
  update: UserUpdateWithoutOperationsInput
  upsert: UserUpsertWithoutOperationsInput
}

input UserUpdateWithoutOperationsInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutOperationsInput {
  create: UserCreateWithoutOperationsInput!
  update: UserUpdateWithoutOperationsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: StringFilter
  operations: OperationListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
